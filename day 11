Today i learned how to write ERC721 contract with minimal functionality like mint, Tokencounter and also IPFS.

ERC721 Contract
---------------

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {ERC721} from "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";

contract BasicNft is ERC721 {
    uint private s_tokenCounter;                                           // This count increments on minting the NFT and it is used as a reference to retrieve the meta data of the NFT. 
    mapping(uint256 => string) tokenIdToUri;                               

    constructor() ERC721("doggie", "DG") {                                 //  ERC721 accepts two parameters -> name and its symbol. This name is used to find the collection of a creator in the market.
        s_tokenCounter = 0;                                              
    }

    function mintNft(string memory TokenUri) public {
        tokenIdToUri[s_tokenCounter] = TokenUri;                           // Maps the token counter with the string. The string is the hash of the meta data stored in the ipfs or can be anyother which represents the data.
        _safeMint(msg.sender, s_tokenCounter);                             // minting function. The token counter is mapped with the creators address.
        s_tokenCounter++;
    }

    function tokenURI(
        uint256 tokenId
    ) public view override returns (string memory) {
        return tokenIdToUri[tokenId];                                      
    }
}

Interesting ....... 





